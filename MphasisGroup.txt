What is DDT ?

DDT (Data-Driven Testing) is a software testing approach where test data is stored externally, 
such as in an Excel sheet, database, or CSV file, and then fed into test scripts. This allows 
the same test case to be executed multiple times with different input values, improving test coverage 
and efficiency."

What is POM ?

What is POM?
The Page Object Model is a framework where each web page of an application is represented as a class, and
 all the elements (buttons, text fields, etc.) on that page are defined as variables within the class.
 Actions performed on these elements (such as clicking a button or entering text) are implemented as 
methods within the same class.

Key Benefits of POM
Separation of Test Logic and UI Elements: Makes tests more readable and easier to maintain.

Code Reusability: Allows reuse of page classes across multiple test cases.

Improved Maintainability: Changes in UI are easier to update in one place rather than modifying
 multiple tests.

Reduces Code Duplication: Avoids writing the same element locators multiple times in different test cases.

Implementation of POM in Selenium
Steps to Implement:
Create a Page Object Class: Define web elements and methods associated with those elements.

Use Page Object in Test Scripts: Call the methods from the page object class inside your test cases.

what is BDD in cucumber ?
BDD (Behavior-Driven Development) in Cucumber is a software development approach that enhances 
collaboration between developers, testers, and business stakeholders. It uses plain English syntax, 
called Gherkin, to define test cases in a way that is easy to understand by all team members.

Cucumber and BDD
Cucumber is a popular tool for implementing BDD. It allows teams to write test cases using Gherkin syntax, which follows a Given-When-Then structure:

gherkin
Feature: Login Functionality
  Scenario: Successful login with valid credentials
    Given the user navigates to the login page
    When the user enters valid username and password
    Then the user should be logged in successfully
Key Benefits of BDD with Cucumber
Improved Collaboration: Non-technical stakeholders can contribute to test creation.

Readable and Understandable Tests: Uses human-friendly syntax.

Reusability of Step Definitions: Common actions can be reused across multiple scenarios.

Enhanced Test Automation: Integrates well with Selenium, Appium, and other tools.

*** config folder in a framework struvcture of a selenium ?
In a Selenium automation framework, the config folder plays a crucial role in managing configuration settings that are used throughout the test execution. It helps in maintaining reusability, flexibility, and ease of maintenance.

Purpose of Config Folder
The config folder typically stores global settings such as:

Environment Variables: URL, browser type, execution mode (local/grid).

Driver Paths: Locations of browser drivers (Chrome, Firefox, etc.).

Test Data: Credentials, API keys, or other reusable data.

Log Configurations: Log levels and formats for better debugging.

Properties Files: Store parameters for easy modifications.

*** What is Log4j reports ?
what is log4j.properties in file in selenium ?
In Selenium automation frameworks, log4j.properties is a configuration file for Apache Log4j, a powerful logging utility used to capture execution details, errors, and debugging information. It helps testers and developers maintain logs in a structured and readable format.

Why Use Log4j in Selenium?
Debugging: Helps identify issues in test execution.

Maintaining Execution Logs: Keeps a record of test runs for future reference.

Flexibility: Configurable logging levels (INFO, DEBUG, ERROR, etc.).

Reduces Console Clutter: Saves logs to external files instead of displaying them on-screen.
Logging Levels in Log4j
TRACE: Most detailed logs (used rarely).

DEBUG: Debugging information for developers.

INFO: General runtime information.

WARN: Indications of potential issues.

ERROR: Logs failures that need attention.

FATAL: Critical errors that stop execution.

*** What is RTM?
RTM is a document that links requirements to test cases, ensuring that no functionality is left untested. It helps track the completeness of testing and ensures that all client requirements are validated.

Why is RTM Important?
Ensures 100% Test Coverage – Every requirement is mapped to a test case.

Tracks Requirement Changes – Helps identify the impact of requirement modifications.

Improves Test Case Management – Avoids missing critical functionalities.

Enhances Defect Tracking – Helps trace defects back to specific requirements.

Types of Traceability in RTM
Forward Traceability – Ensures that all requirements are covered in test cases.

Backward Traceability – Ensures that test cases are linked to valid requirements.

Bi-Directional Traceability – Combines both forward and backward traceability for complete coverage.

** Extent Reports in framework of selenium
Extent Reports is a powerful reporting library used in Selenium automation frameworks to generate detailed and visually appealing test execution reports. It provides insights into test results, logs, screenshots, 
and execution time, making debugging and analysis easier.

Why Use Extent Reports in Selenium?
Enhanced Reporting: Generates interactive HTML reports with graphs and logs.

Customizable: Allows adding screenshots, logs, and custom messages.

Integration with TestNG & JUnit: Works seamlessly with popular testing frameworks.

Real-time Execution Tracking: Displays test execution status dynamically.


*** What is Thread.sleep() works ?
what is Thread.sleep() in selenium
Thread.sleep() in Selenium is a method used to pause the execution of a test script for a 
specified amount of time. It belongs to the Java Thread class and is often used when dealing
 with dynamic web elements that take time to load.

Why Use Thread.sleep()?
Handling Slow-Loading Elements: Useful when elements take time to appear.

Waiting for Page Transitions: Helps when navigating between pages.

Debugging Purposes: Can be used to observe test execution step-by-step.

Limitations of Thread.sleep()
Fixed Wait Time: It pauses execution for a set duration, even if the element loads earlier.

Performance Issues: Can slow down test execution unnecessarily.

Not Recommended for Dynamic Elements: Better alternatives like Implicit Wait and Explicit Wait 
should be used.

*** what is implicitwait in selenium ?
Implicit Wait in Selenium is a mechanism that instructs the WebDriver to wait for a specified amount of time before throwing a No Such Element Exception if an element is not immediately available. It helps handle synchronization issues in web applications where elements take time to load.

How Implicit Wait Works
It applies globally to all elements in the WebDriver session.

Once set, WebDriver waits for the specified time before failing to locate an element.

It does not wait for a specific condition; it simply delays execution.

Explicit Wait in Selenium is a mechanism that allows WebDriver to wait for a specific condition before proceeding with execution. Unlike Implicit Wait, which applies globally, Explicit Wait is used for individual elements that may take time to appear or become interactive.

*** How Explicit Wait Works ?
It waits until a specified condition is met before interacting with an element.

It is more efficient than Thread.sleep(), as it does not pause execution unnecessarily.

It is used when elements load dynamically or require specific conditions.

In Selenium, Explicit Wait allows WebDriver to wait for specific conditions before proceeding. Here are 8 commonly used conditions in Explicit Wait:

visibilityOfElementLocated(By locator) – Waits until the element is visible on the page.

elementToBeClickable(By locator) – Waits until the element is clickable.

presenceOfElementLocated(By locator) – Waits until the element is present in the DOM.

textToBePresentInElement(By locator, String text) – Waits until specific text appears in an element.

titleIs(String title) – Waits until the page title matches the expected title.

titleContains(String partialTitle) – Waits until the page title contains a specific keyword.

alertIsPresent() – Waits until an alert box appears.

elementToBeSelected(By locator) – Waits until a checkbox or dropdown option is selected.


*** Fluent Wait in Selenium is an advanced waiting mechanism that provides more flexibility than Implicit Wait and Explicit Wait. It allows WebDriver to wait for a condition while periodically checking for the element's presence.

Key Features of Fluent Wait
Customizable Timeout: You can set a maximum wait time.

Polling Frequency: Defines how often WebDriver should check for the element.

Exception Handling: Can ignore specific exceptions like NoSuchElementException.

*** what is iRetryAnalyzer in selenium ?
IRetryAnalyzer in Selenium is an interface provided by TestNG that allows failed test cases to be retried automatically. It helps improve test stability by rerunning tests that fail due to flaky issues like network delays, browser timeouts, or intermittent failures.

How IRetryAnalyzer Works
It implements the retry() method, which determines whether a test should be retried.

The retry logic is applied at the test method level using the @Test annotation.

It helps reduce false positives caused by temporary issues.
Advantages of IRetryAnalyzer
Reduces Flakiness: Helps stabilize test execution.

Improves CI/CD Pipelines: Ensures tests pass despite temporary failures.

Customizable Retry Count: Allows setting the number of retries.




Intro 

In our group project, I was assigned to work on the search functionality module. This module plays

 a crucial role in enabling users to efficiently find books using different search criteria.

The search functionality consists of two main cases: search without filtering and search with filtering.

 In search without filtering, I handled three types of inputs—valid, invalid, and null. When a valid

 keyword is entered, books are displayed. An invalid keyword returns no results, and a null keyword ensures that navigation remains on the same page instead of redirecting elsewhere.

For search with filtering, I implemented multiple filtering options, including search by title, 

availability, binding, and language. This allows users to refine their search and find books more

 accurately based on their preferences. Since filtering is dependent on valid search inputs, 

incorrect keywords do not return any results. To automate the testing of these scenarios, I used Cucumber with Gherkin syntax, ensuring the tests are structured and readable. My step definition class processes user interactions dynamically and applies data-driven testing through Excel integration. I also optimized test execution by implementing Explicit and Fluent Wait mechanisms, ensuring the stability and reliability of automated tests.

Overall, my role was focused on enhancing the efficiency, accuracy, and scalability of the 

search functionality. By integrating robust automation techniques, handling edge cases effectively, 

and improving test stability, I ensured that the module delivers a seamless user experience.